import org.apache.tools.ant.taskdefs.condition.Os
import proguard.gradle.ProGuardTask

plugins {
    id 'jvm-application'
}

application {
    mainClassName = 'dragapult.app.MainKt'
}

tasks.register("proguard", ProGuardTask) {
    dependsOn(tasks.shadowJar)
    group = "proguard"

    // ensure task is not made dirty when nothing changes
    inputs.file("proguard.pro")
    inputs.files(tasks.shadowJar.outputs.files)
    outputs.file(project.layout.buildDirectory.file("libs/dragapult-min.jar"))

    configuration(files("proguard.pro"))
    injars(tasks.shadowJar.outputs.files)
    outjars(project.layout.buildDirectory.file("libs/dragapult-min.jar"))

    libraryjars "${System.getProperty("java.home")}/jmods/java.base.jmod", jarfilter: "!**.jar", filter: "!module-info.class"
    libraryjars "${System.getProperty("java.home")}/jmods/java.sql.jmod", jarfilter: "!**.jar", filter: "!module-info.class"
    libraryjars "${System.getProperty("java.home")}/jmods/java.xml.jmod", jarfilter: "!**.jar", filter: "!module-info.class"
}

tasks.shadowJar.finalizedBy(proguard)

tasks.register("nativeImage", Exec) {
    dependsOn(tasks.proguard)
    group = "distribution"

    def file = tasks.proguard.outputs.files.singleFile
    def out = project.layout.buildDirectory.file("outputs/dragapult")
    out.get().asFile.parentFile.mkdirs()

    inputs.file(file)
    outputs.file(out.get())

    onlyIf {
        System.getProperty("java.vendor").containsIgnoreCase("graalvm")
    }
    def affix = Os.isFamily(Os.FAMILY_WINDOWS) ? ".cmd" : ""
    def path = new File(System.getenv("JAVA_HOME"), "bin/native-image$affix").absolutePath
    commandLine(
            path,
            "-jar", file,
            "-o", out.get().asFile,
            "--verbose",
            "--add-modules=java.base,java.sql,java.xml",
            "-march=native",
            "-O3",
            "--no-fallback",
            "--strict-image-heap",
            "--gc=epsilon"
    )
}

dependencies {
    implementation libs.kotlin.serialization.json
    implementation libs.kotlin.serialization.xml
    implementation libs.kotlin.serialization.yaml
    implementation libs.apache.csv
    implementation libs.apache.cli
    implementation libs.dagger
    ksp libs.dagger.compiler
}